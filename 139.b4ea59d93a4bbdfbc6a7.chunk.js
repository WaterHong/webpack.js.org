(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{431:function(n,e,a){"use strict";a.r(e),e.default='<p><code>DllPlugin</code> 和 <code>DllReferencePlugin</code> 用某种方法实现了拆分 bundles，同时还大幅度提升了构建的速度。"DLL" 一词代表微软最初引入的动态链接库。</p>\n<h2 id="dllplugin"><code>DllPlugin</code><a href="#dllplugin" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>此插件用于在单独的 webpack 配置中创建一个 dll-only-bundle。 此插件会生成一个名为 <code>manifest.json</code> 的文件，这个文件是用于让 <a href="#dllreferenceplugin"><code>DllReferencePlugin</code></a> 能够映射到相应的依赖上。</p>\n<ul>\n<li><code>context</code>（可选）： manifest 文件中请求的 context (默认值为 webpack 的 context)</li>\n<li><code>format</code> (boolean = false)：如果为 <code>true</code>，则 manifest json 文件 (输出文件) 将被格式化。</li>\n<li><code>name</code>：暴露出的 DLL 的函数名（<a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js">TemplatePaths</a>：<code>[hash]</code> &#x26; <code>[name]</code> ）</li>\n<li><code>path</code>：manifest.json 文件的 <strong>绝对路径</strong>（输出文件）</li>\n<li><code>entryOnly</code> (boolean = true)：如果为 <code>true</code>，则仅暴露入口</li>\n<li><code>type</code>：dll bundle 的类型</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>我们建议 DllPlugin 只在 <code>entryOnly: true</code> 时使用，否则 DLL 中的 tree shaking 将无法工作，因为所有 exports 均可使用。</p>\n</blockquote>\n<p>在给定的 <code>path</code> 路径下创建一个 <code>manifest.json</code> 文件。这个文件包含了从 require 和 import 中 request 到模块 id 的映射。 <code>DllReferencePlugin</code> 也会用到这个文件。</p>\n<p>此插件与 <a href="/configuration/output/#outputlibrary"><code>output.library</code></a> 的选项相结合可以暴露出（也称为放入全局作用域）dll 函数。</p>\n<h2 id="dllreferenceplugin"><code>DllReferencePlugin</code><a href="#dllreferenceplugin" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>此插件配置在 webpack 的主配置文件中，此插件会把 dll-only-bundles 引用到需要的预编译的依赖中。</p>\n<ul>\n<li><code>context</code>：（<strong>绝对路径</strong>） manifest (或者是内容属性)中请求的上下文</li>\n<li><code>extensions</code>：用于解析 dll bundle 中模块的扩展名 (仅在使用 \'scope\' 时使用)。</li>\n<li><code>manifest</code> ：包含 <code>content</code> 和 <code>name</code> 的对象，或者是一个字符串 —— 编译时用于加载 JSON manifest 的绝对路径</li>\n<li><code>content</code> (可选)： 请求到模块 id 的映射（默认值为 <code>manifest.content</code>）</li>\n<li><code>name</code> (可选)：dll 暴露地方的名称（默认值为 <code>manifest.name</code>）（可参考<a href="/configuration/externals/"><code>externals</code></a>）</li>\n<li><code>scope</code> (可选)：dll 中内容的前缀</li>\n<li><code>sourceType</code> (可选)：dll 是如何暴露的 (<a href="/configuration/output/#outputlibrarytarget">libraryTarget</a>)</li>\n</ul>\n<pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <code>__webpack_require__</code> 函数来 <code>require</code> 对应的模块</p>\n<blockquote class="warning">\n<p>保持 <code>name</code> 与 <a href="/configuration/output/#outputlibrary"><code>output.library</code></a> 一致。</p>\n</blockquote>\n<h3 id="模式modes">模式(Modes)<a href="#%E6%A8%A1%E5%BC%8Fmodes" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>这个插件支持两种模式，分别是作用域（<em>scoped</em>）和映射（<em>mapped</em>）。</p>\n<h4 id="scoped-mode">Scoped Mode<a href="#scoped-mode" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>dll 中的内容可以使用模块前缀的方式引用，举例来说，设置 <code>scope = \'xyz\'</code>，这个 dll 中的名为 <code>abc</code> 的文件可以通过 <code>require(\'xyz/abc\')</code> 来获取。</p>\n<blockquote class="tip">\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">查看 scope 的使用示例</a></p>\n</blockquote>\n<h4 id="mapped-mode">Mapped Mode<a href="#mapped-mode" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>dll 中的内容会被映射到当前目录下。如果被 <code>require</code> 的文件与 dll 中的某个文件匹配（解析之后），那么这个 dll 中的文件就会被使用。</p>\n<p>由于这是在解析了 dll 中每个文件之后才触发的，因此相同的路径必须能够确保这个 dll bundle 的使用者（不一定是人，可指某些代码）有权限访问。 举例来说， 假如一个 dll bundle 中含有 <code>loadash</code> 库以及文件 <code>abc</code>， 那么 <code>require("lodash")</code> 和 <code>require("./abc")</code> 都不会被编译进主 bundle 文件中，而是会被 dll 所使用。</p>\n<h2 id="用法usage">用法(Usage)<a href="#%E7%94%A8%E6%B3%95usage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<blockquote class="warning">\n<p><code>DllReferencePlugin</code> 和 <code>DllPlugin</code> 都是在 <em>单独的</em> webpack 配置中使用的。</p>\n</blockquote>\n<p><strong>webpack.vendor.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'[name]_[hash]\'</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'manifest.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.app.config.js</strong></p>\n<pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  context<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>\n  manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./manifest.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  scope<span class="token punctuation">:</span> <span class="token string">\'xyz\'</span><span class="token punctuation">,</span>\n  sourceType<span class="token punctuation">:</span> <span class="token string">\'commonjs2\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="示例">示例<a href="#%E7%A4%BA%E4%BE%8B" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack/webpack/tree/master/examples/dll">Vendor</a> 和 <a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">User</a></p>\n<p><em>两个单独的用例，用来分别演示作用域（scope）和上下文（context）。</em></p>\n<blockquote class="tip">\n<p>多个 <code>DllPlugins</code> 和 <code>DllReferencePlugins</code>。</p>\n</blockquote>\n<h2 id="参考">参考<a href="#%E5%8F%82%E8%80%83" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="source">Source<a href="#source" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllPlugin.js">DllPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllReferencePlugin.js">DllReferencePlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllEntryPlugin.js">DllEntryPlugin source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/DllModuleFactory.js">DllModuleFactory source</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/lib/LibManifestPlugin.js">ManifestPlugin source</a></li>\n</ul>\n<h3 id="tests">Tests<a href="#tests" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<ul>\n<li><a href="https://github.com/webpack/webpack/blob/master/test/configCases/dll-plugin/0-create-dll/webpack.config.js">DllPlugin creation test</a></li>\n<li><a href="https://github.com/webpack/webpack/blob/master/test/configCases/dll-plugin/2-use-dll-without-scope/webpack.config.js">DllPlugin without scope test</a></li>\n<li><a href="https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin">DllReferencePlugin use Dll test</a></li>\n</ul>\n'}}]);